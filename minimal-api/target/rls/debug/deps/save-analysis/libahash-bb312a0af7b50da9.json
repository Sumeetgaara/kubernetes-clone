{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3","program":"C:\\Users\\sumba\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","ahash","--edition=2018","C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=bb312a0af7b50da9","-C","extra-filename=-bb312a0af7b50da9","--out-dir","c:\\Users\\sumba\\OneDrive\\Documents\\Rust Projects\\minimal-api\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\sumba\\OneDrive\\Documents\\Rust Projects\\minimal-api\\target\\rls\\debug\\deps","--extern","getrandom=c:\\Users\\sumba\\OneDrive\\Documents\\Rust Projects\\minimal-api\\target\\rls\\debug\\deps\\libgetrandom-e8aeabc0f89113d5.rmeta","--extern","once_cell=c:\\Users\\sumba\\OneDrive\\Documents\\Rust Projects\\minimal-api\\target\\rls\\debug\\deps\\libonce_cell-9fd1be56278cc064.rmeta","--cap-lints","allow","--cfg","feature=\"runtime-rng\"","--cfg","feature=\"folded_multiply\"","--error-format=json","--sysroot","C:\\Users\\sumba\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\sumba\\OneDrive\\Documents\\Rust Projects\\minimal-api\\target\\rls\\debug\\deps\\libahash-bb312a0af7b50da9.rmeta"},"prelude":{"crate_id":{"name":"ahash","disambiguator":[4040314536165318444,8348382775492522518]},"crate_root":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src","external_crates":[{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15394396593765937133,15104794829170053384]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","num":2,"id":{"name":"core","disambiguator":[14223085168939843507,9453778982390123811]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10495964697894269666,7444397110794681726]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5630579929119936438,10747952327389013202]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[755004289757070725,4528322009891643596]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12293211462733931105,3605749939090106910]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14880717690889174640,9014378682587101436]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1733233879246965746,6308927592973156139]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2578852399168599952,875302055328020592]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15050766551219055192,6843698544963456792]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14716868785672998615,14481457355720881040]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7183069464598737283,14932178614966804545]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","num":13,"id":{"name":"once_cell","disambiguator":[15770301717060747651,17430418598302640687]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","num":14,"id":{"name":"getrandom","disambiguator":[832640547887611378,17523955748999129130]}},{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","num":15,"id":{"name":"cfg_if","disambiguator":[5645197522646515231,12829599349970567115]}}],"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":0,"byte_end":8065,"line_start":1,"line_end":253,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":1990,"byte_end":1997,"line_start":55,"line_end":55,"column_start":31,"column_end":38},"alias_span":null,"name":"AHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1113},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":2028,"byte_end":2039,"line_start":56,"line_end":56,"column_start":30,"column_end":41},"alias_span":null,"name":"RandomState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":2069,"byte_end":2079,"line_start":58,"line_end":58,"column_start":28,"column_end":38},"alias_span":null,"name":"CallHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":2131,"byte_end":2139,"line_start":61,"line_end":61,"column_start":26,"column_end":34},"alias_span":null,"name":"AHashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":2190,"byte_end":2198,"line_start":63,"line_end":63,"column_start":26,"column_end":34},"alias_span":null,"name":"AHashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":0,"byte_end":8065,"line_start":1,"line_end":253,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":43},{"krate":0,"index":73},{"krate":0,"index":205},{"krate":0,"index":311},{"krate":0,"index":326},{"krate":0,"index":371},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":1220},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":403}],"decl_id":null,"docs":" AHash is a hashing algorithm is intended to be a high performance, (hardware specific), keyed hash function.\n This can be seen as a DOS resistant alternative to `FxHash`, or a fast equivalent to `SipHash`.\n It provides a high speed hash algorithm, but where the result is not predictable without knowing a Key.\n This allows it to be used in a `HashMap` without allowing for the possibility that an malicious user can\n induce a collision.","sig":null,"attributes":[{"value":"/ AHash is a hashing algorithm is intended to be a high performance, (hardware specific), keyed hash function.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":0,"byte_end":112,"line_start":1,"line_end":1,"column_start":1,"column_end":113}},{"value":"/ This can be seen as a DOS resistant alternative to `FxHash`, or a fast equivalent to `SipHash`.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":113,"byte_end":212,"line_start":2,"line_end":2,"column_start":1,"column_end":100}},{"value":"/ It provides a high speed hash algorithm, but where the result is not predictable without knowing a Key.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":213,"byte_end":320,"line_start":3,"line_end":3,"column_start":1,"column_end":108}},{"value":"/ This allows it to be used in a `HashMap` without allowing for the possibility that an malicious user can","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":321,"byte_end":429,"line_start":4,"line_end":4,"column_start":1,"column_end":109}},{"value":"/ induce a collision.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":430,"byte_end":453,"line_start":5,"line_end":5,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":454,"byte_end":457,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # How aHash works","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":458,"byte_end":479,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":480,"byte_end":483,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ aHash uses the hardware AES instruction on x86 processors to provide a keyed hash function.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":484,"byte_end":579,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ aHash is not a cryptographically secure hash.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":580,"byte_end":629,"line_start":10,"line_end":10,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":630,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":634,"byte_end":647,"line_start":12,"line_end":12,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":648,"byte_end":655,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use ahash::{AHasher, RandomState};","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":656,"byte_end":694,"line_start":14,"line_end":14,"column_start":1,"column_end":39}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":695,"byte_end":729,"line_start":15,"line_end":15,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":730,"byte_end":733,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let mut map: HashMap<i32, i32, RandomState> = HashMap::default();","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":734,"byte_end":803,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ map.insert(12, 34);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":804,"byte_end":827,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":828,"byte_end":835,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ For convinence wrappers called `AHashMap` and `AHashSet` are also provided.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":836,"byte_end":915,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ These to the same thing with slightly less typing.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":916,"byte_end":970,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":971,"byte_end":984,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ use ahash::AHashMap;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":985,"byte_end":1009,"line_start":23,"line_end":23,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":1010,"byte_end":1013,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut map: AHashMap<i32, i32> = AHashMap::with_capacity(4);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":1014,"byte_end":1079,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ map.insert(12, 34);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":1080,"byte_end":1103,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/ map.insert(56, 78);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":1104,"byte_end":1127,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":1128,"byte_end":1135,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"deny(clippy :: correctness, clippy :: complexity, clippy :: perf)","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":1136,"byte_end":1199,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"allow(clippy :: pedantic, clippy :: cast_lossless, clippy ::\n        unreadable_literal)","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":1200,"byte_end":1278,"line_start":30,"line_end":30,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":14058,"byte_end":14065,"line_start":24,"line_end":24,"column_start":12,"column_end":19},"name":"AHasher","qualname":"::fallback_hash::AHasher","value":"AHasher {  }","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087}],"decl_id":null,"docs":" A `Hasher` for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"/ A `Hasher` for hashing an arbitrary stream of bytes.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13564,"byte_end":13620,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13621,"byte_end":13624,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Instances of [`AHasher`] represent state that is updated while hashing data.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13625,"byte_end":13705,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13706,"byte_end":13709,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Each method updates the internal state based on the new data provided. Once","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13710,"byte_end":13789,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ all of the data has been provided, the resulting hash can be obtained by calling","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13790,"byte_end":13874,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/ `finish()`","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13875,"byte_end":13889,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13890,"byte_end":13893,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [Clone] is also provided in case you wish to calculate hashes for two different items that","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13894,"byte_end":13988,"line_start":20,"line_end":20,"column_start":1,"column_end":95}},{"value":"/ start with the same data.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":13989,"byte_end":14018,"line_start":21,"line_end":21,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":14019,"byte_end":14022,"line_start":22,"line_end":22,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":14295,"byte_end":14308,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<AHasher>::new_with_keys","value":"pub fn new_with_keys(u128, u128) -> AHasher","parent":null,"children":[],"decl_id":null,"docs":" Creates a new hasher keyed to the provided key.\n","sig":null,"attributes":[{"value":"/ Creates a new hasher keyed to the provided key.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":14147,"byte_end":14198,"line_start":31,"line_end":31,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":14203,"byte_end":14212,"line_start":32,"line_end":32,"column_start":5,"column_end":14}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":14217,"byte_end":14236,"line_start":33,"line_end":33,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":26856,"byte_end":26864,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"AHashMap","qualname":"::hash_map::AHashMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n (Requires the `std` feature to be enabled.)\n","sig":null,"attributes":[{"value":"/ A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":26674,"byte_end":26779,"line_start":17,"line_end":17,"column_start":1,"column_end":106}},{"value":"/ (Requires the `std` feature to be enabled.)","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":26780,"byte_end":26827,"line_start":18,"line_end":18,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27287,"byte_end":27290,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<AHashMap<K, V, RandomState>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27384,"byte_end":27397,"line_start":39,"line_end":39,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<AHashMap<K, V, RandomState>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27591,"byte_end":27602,"line_start":48,"line_end":48,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<AHashMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27701,"byte_end":27725,"line_start":52,"line_end":52,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<AHashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28451,"byte_end":28454,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"get","qualname":"<AHashMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27937,"byte_end":27999,"line_start":62,"line_end":62,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28004,"byte_end":28007,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28012,"byte_end":28075,"line_start":64,"line_end":64,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28080,"byte_end":28147,"line_start":65,"line_end":65,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28152,"byte_end":28169,"line_start":66,"line_end":66,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28174,"byte_end":28177,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28182,"byte_end":28196,"line_start":68,"line_end":68,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28201,"byte_end":28204,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28209,"byte_end":28216,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28221,"byte_end":28255,"line_start":71,"line_end":71,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28260,"byte_end":28263,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28268,"byte_end":28301,"line_start":73,"line_end":73,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28306,"byte_end":28329,"line_start":74,"line_end":74,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28334,"byte_end":28374,"line_start":75,"line_end":75,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28379,"byte_end":28413,"line_start":76,"line_end":76,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28418,"byte_end":28425,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28430,"byte_end":28439,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29139,"byte_end":29152,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<AHashMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28587,"byte_end":28652,"line_start":87,"line_end":87,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28657,"byte_end":28660,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28665,"byte_end":28737,"line_start":89,"line_end":89,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28742,"byte_end":28809,"line_start":90,"line_end":90,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28814,"byte_end":28831,"line_start":91,"line_end":91,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28836,"byte_end":28839,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28844,"byte_end":28858,"line_start":93,"line_end":93,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28863,"byte_end":28866,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28871,"byte_end":28878,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28883,"byte_end":28917,"line_start":96,"line_end":96,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28922,"byte_end":28925,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28930,"byte_end":28963,"line_start":98,"line_end":98,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28968,"byte_end":28991,"line_start":99,"line_end":99,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":28996,"byte_end":29052,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29057,"byte_end":29101,"line_start":101,"line_end":101,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29106,"byte_end":29113,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29118,"byte_end":29127,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29848,"byte_end":29855,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AHashMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29301,"byte_end":29371,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29376,"byte_end":29379,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29384,"byte_end":29447,"line_start":114,"line_end":114,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29452,"byte_end":29519,"line_start":115,"line_end":115,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29524,"byte_end":29541,"line_start":116,"line_end":116,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29546,"byte_end":29549,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29554,"byte_end":29568,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29573,"byte_end":29576,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29581,"byte_end":29588,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29593,"byte_end":29627,"line_start":121,"line_end":121,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29632,"byte_end":29635,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29640,"byte_end":29673,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29678,"byte_end":29701,"line_start":124,"line_end":124,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29706,"byte_end":29744,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29749,"byte_end":29766,"line_start":126,"line_end":126,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29771,"byte_end":29776,"line_start":127,"line_end":127,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29781,"byte_end":29810,"line_start":128,"line_end":128,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29815,"byte_end":29822,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":29827,"byte_end":29836,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30870,"byte_end":30876,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"insert","qualname":"<AHashMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30000,"byte_end":30042,"line_start":139,"line_end":139,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30047,"byte_end":30050,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30055,"byte_end":30122,"line_start":141,"line_end":141,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30127,"byte_end":30130,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30135,"byte_end":30210,"line_start":143,"line_end":143,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30215,"byte_end":30286,"line_start":144,"line_end":144,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30291,"byte_end":30364,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30369,"byte_end":30397,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30402,"byte_end":30405,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ [module-level documentation]: crate::collections#insert-and-complex-keys","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30410,"byte_end":30486,"line_start":148,"line_end":148,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30491,"byte_end":30494,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30499,"byte_end":30513,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30518,"byte_end":30521,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30526,"byte_end":30533,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30538,"byte_end":30572,"line_start":153,"line_end":153,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30577,"byte_end":30580,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30585,"byte_end":30618,"line_start":155,"line_end":155,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30623,"byte_end":30665,"line_start":156,"line_end":156,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30670,"byte_end":30708,"line_start":157,"line_end":157,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30713,"byte_end":30716,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30721,"byte_end":30745,"line_start":159,"line_end":159,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30750,"byte_end":30797,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30802,"byte_end":30832,"line_start":161,"line_end":161,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30837,"byte_end":30844,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30849,"byte_end":30858,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31519,"byte_end":31525,"line_start":186,"line_end":186,"column_start":12,"column_end":18},"name":"remove","qualname":"<AHashMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":30954,"byte_end":31027,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31032,"byte_end":31062,"line_start":169,"line_end":169,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31067,"byte_end":31070,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31075,"byte_end":31138,"line_start":171,"line_end":171,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31143,"byte_end":31210,"line_start":172,"line_end":172,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31215,"byte_end":31232,"line_start":173,"line_end":173,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31237,"byte_end":31240,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31245,"byte_end":31259,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31264,"byte_end":31267,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31272,"byte_end":31279,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31284,"byte_end":31318,"line_start":178,"line_end":178,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31323,"byte_end":31326,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31331,"byte_end":31364,"line_start":180,"line_end":180,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31369,"byte_end":31392,"line_start":181,"line_end":181,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31397,"byte_end":31439,"line_start":182,"line_end":182,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31444,"byte_end":31481,"line_start":183,"line_end":183,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31486,"byte_end":31493,"line_start":184,"line_end":184,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31498,"byte_end":31507,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36254,"byte_end":36262,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"AHashSet","qualname":"::hash_set::AHashSet","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.\n (Requires the `std` feature to be enabled.)\n","sig":null,"attributes":[{"value":"/ A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36072,"byte_end":36177,"line_start":14,"line_end":14,"column_start":1,"column_end":106}},{"value":"/ (Requires the `std` feature to be enabled.)","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36178,"byte_end":36225,"line_start":15,"line_end":15,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36649,"byte_end":36652,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<AHashSet<T, RandomState>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36746,"byte_end":36759,"line_start":36,"line_end":36,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<AHashSet<T, RandomState>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36947,"byte_end":36958,"line_start":45,"line_end":45,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<AHashSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37057,"byte_end":37081,"line_start":49,"line_end":49,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<AHashSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1113},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56185,"byte_end":56196,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"RandomState","qualname":"::random_state::RandomState","value":"RandomState {  }","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117}],"decl_id":null,"docs":" Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create\n [AHasher]s in order to hash the keys of the map. See `build_hasher` below.","sig":null,"attributes":[{"value":"/ Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":55845,"byte_end":55930,"line_start":81,"line_end":81,"column_start":1,"column_end":86}},{"value":"/ [AHasher]s in order to hash the keys of the map. See `build_hasher` below.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":55931,"byte_end":56009,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56010,"byte_end":56013,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [build_hasher]: ahash::","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56014,"byte_end":56041,"line_start":84,"line_end":84,"column_start":1,"column_end":28}},{"value":"/ [Hasher]: std::hash::Hasher","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56042,"byte_end":56073,"line_start":85,"line_end":85,"column_start":1,"column_end":32}},{"value":"/ [BuildHasher]: std::hash::BuildHasher","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56074,"byte_end":56115,"line_start":86,"line_end":86,"column_start":1,"column_end":42}},{"value":"/ [HashMap]: std::collections::HashMap","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56116,"byte_end":56156,"line_start":87,"line_end":87,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56520,"byte_end":56523,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<RandomState>::new","value":"pub fn new() -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Use randomly generated keys\n","sig":null,"attributes":[{"value":"/ Use randomly generated keys","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56463,"byte_end":56494,"line_start":103,"line_end":103,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56499,"byte_end":56508,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":57886,"byte_end":57899,"line_start":141,"line_end":141,"column_start":12,"column_end":25},"name":"generate_with","qualname":"<RandomState>::generate_with","value":"pub fn generate_with(u64, u64, u64, u64) -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Allows for supplying seeds, but each time it is called the resulting state will be different.\n This is done using a static counter, so it can safely be used with a fixed keys.\n","sig":null,"attributes":[{"value":"/ Allows for supplying seeds, but each time it is called the resulting state will be different.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":57674,"byte_end":57771,"line_start":138,"line_end":138,"column_start":5,"column_end":102}},{"value":"/ This is done using a static counter, so it can safely be used with a fixed keys.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":57776,"byte_end":57860,"line_start":139,"line_end":139,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":57865,"byte_end":57874,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":59411,"byte_end":59421,"line_start":186,"line_end":186,"column_start":18,"column_end":28},"name":"with_seeds","qualname":"<RandomState>::with_seeds","value":"pub const fn with_seeds(u64, u64, u64, u64) -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Allows for explicitly setting the seeds to used.\n","sig":null,"attributes":[{"value":"/ Allows for explicitly setting the seeds to used.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":59327,"byte_end":59379,"line_start":184,"line_end":184,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":59384,"byte_end":59393,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63429,"byte_end":63439,"line_start":31,"line_end":31,"column_start":11,"column_end":21},"name":"CallHasher","qualname":"::specialize::CallHasher","value":"CallHasher","parent":null,"children":[{"krate":0,"index":377}],"decl_id":null,"docs":" Provides a way to get an optimized hasher for a given data type.\n Rather than using a Hasher generically which can hash any value, this provides a way to get a specialized hash\n for a specific type. So this may be faster for primitive types.\n # Example\n ```\n use std::hash::BuildHasher;\n use ahash::RandomState;\n use ahash::CallHasher;","sig":null,"attributes":[{"value":"/ Provides a way to get an optimized hasher for a given data type.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":62920,"byte_end":62988,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ Rather than using a Hasher generically which can hash any value, this provides a way to get a specialized hash","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":62989,"byte_end":63103,"line_start":18,"line_end":18,"column_start":1,"column_end":115}},{"value":"/ for a specific type. So this may be faster for primitive types.","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63104,"byte_end":63171,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63172,"byte_end":63185,"line_start":20,"line_end":20,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63186,"byte_end":63193,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::hash::BuildHasher;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63194,"byte_end":63225,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ use ahash::RandomState;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63226,"byte_end":63253,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/ use ahash::CallHasher;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63254,"byte_end":63280,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63281,"byte_end":63284,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let hash_builder = RandomState::new();","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63285,"byte_end":63327,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/ //...","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63328,"byte_end":63337,"line_start":27,"line_end":27,"column_start":1,"column_end":10}},{"value":"/ let value = 17;","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63338,"byte_end":63357,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"/ let hash = u32::get_hash(&value, &hash_builder);","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63358,"byte_end":63410,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63411,"byte_end":63418,"line_start":30,"line_end":30,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63449,"byte_end":63457,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"get_hash","qualname":"::specialize::CallHasher::get_hash","value":"pub fn get_hash<H: Hash + ?Sized, B: BuildHasher>(&H, &B) -> u64","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":14133,"byte_end":14140,"line_start":30,"line_end":30,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":20128,"byte_end":20135,"line_start":146,"line_end":146,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":26970,"byte_end":26978,"line_start":22,"line_end":22,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27137,"byte_end":27145,"line_start":28,"line_end":28,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27246,"byte_end":27254,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27534,"byte_end":27542,"line_start":44,"line_end":44,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27869,"byte_end":27877,"line_start":57,"line_end":57,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31686,"byte_end":31694,"line_start":195,"line_end":195,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31833,"byte_end":31841,"line_start":202,"line_end":202,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31962,"byte_end":31970,"line_start":208,"line_end":208,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32057,"byte_end":32065,"line_start":215,"line_end":215,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32251,"byte_end":32259,"line_start":226,"line_end":226,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32368,"byte_end":32376,"line_start":234,"line_end":234,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32762,"byte_end":32770,"line_start":253,"line_end":253,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32969,"byte_end":32977,"line_start":264,"line_end":264,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":33641,"byte_end":33649,"line_start":290,"line_end":290,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":33843,"byte_end":33851,"line_start":298,"line_end":298,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":34071,"byte_end":34079,"line_start":309,"line_end":309,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":34315,"byte_end":34323,"line_start":321,"line_end":321,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36356,"byte_end":36364,"line_start":19,"line_end":19,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36511,"byte_end":36519,"line_start":25,"line_end":25,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36611,"byte_end":36619,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36893,"byte_end":36901,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37232,"byte_end":37240,"line_start":54,"line_end":54,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37370,"byte_end":37378,"line_start":61,"line_end":61,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37492,"byte_end":37500,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37659,"byte_end":37667,"line_start":77,"line_end":77,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":40970,"byte_end":40978,"line_start":212,"line_end":212,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":41156,"byte_end":41164,"line_start":222,"line_end":222,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":41590,"byte_end":41598,"line_start":241,"line_end":241,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":41773,"byte_end":41781,"line_start":249,"line_end":249,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":41981,"byte_end":41989,"line_start":260,"line_end":260,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":42192,"byte_end":42200,"line_start":271,"line_end":271,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56318,"byte_end":56329,"line_start":96,"line_end":96,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56445,"byte_end":56456,"line_start":102,"line_end":102,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":59592,"byte_end":59603,"line_start":191,"line_end":191,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":59697,"byte_end":59708,"line_start":198,"line_end":198,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63591,"byte_end":63592,"line_start":36,"line_end":36,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":3056,"byte_end":3063,"line_start":89,"line_end":89,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":4510,"byte_end":4511,"line_start":131,"line_end":131,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":14133,"byte_end":14140,"line_start":30,"line_end":30,"column_start":6,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\fallback_hash.rs","byte_start":20128,"byte_end":20135,"line_start":146,"line_end":146,"column_start":17,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1084},"to":{"krate":2,"index":7156}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":26970,"byte_end":26978,"line_start":22,"line_end":22,"column_start":56,"column_end":64},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27137,"byte_end":27145,"line_start":28,"line_end":28,"column_start":56,"column_end":64},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":1994}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27246,"byte_end":27254,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27534,"byte_end":27542,"line_start":44,"line_end":44,"column_start":15,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":27869,"byte_end":27877,"line_start":57,"line_end":57,"column_start":15,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31686,"byte_end":31694,"line_start":195,"line_end":195,"column_start":25,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":2281}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31833,"byte_end":31841,"line_start":202,"line_end":202,"column_start":28,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":2294}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":31962,"byte_end":31970,"line_start":208,"line_end":208,"column_start":30,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1093},"to":{"krate":1,"index":4006}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32057,"byte_end":32065,"line_start":215,"line_end":215,"column_start":29,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":1798}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32251,"byte_end":32259,"line_start":226,"line_end":226,"column_start":22,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":1803}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32368,"byte_end":32376,"line_start":234,"line_end":234,"column_start":40,"column_end":48},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":2362}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32762,"byte_end":32770,"line_start":253,"line_end":253,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":6960}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":32969,"byte_end":32977,"line_start":264,"line_end":264,"column_start":40,"column_end":48},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":5532}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":33641,"byte_end":33649,"line_start":290,"line_end":290,"column_start":32,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":5536}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":33843,"byte_end":33851,"line_start":298,"line_end":298,"column_start":34,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":5545}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":34071,"byte_end":34079,"line_start":309,"line_end":309,"column_start":46,"column_end":54},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":5545}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_map.rs","byte_start":34315,"byte_end":34323,"line_start":321,"line_end":321,"column_start":24,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":2069}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36356,"byte_end":36364,"line_start":19,"line_end":19,"column_start":50,"column_end":58},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36511,"byte_end":36519,"line_start":25,"line_end":25,"column_start":50,"column_end":58},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":1994}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36611,"byte_end":36619,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":36893,"byte_end":36901,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37232,"byte_end":37240,"line_start":54,"line_end":54,"column_start":22,"column_end":30},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":2281}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37370,"byte_end":37378,"line_start":61,"line_end":61,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":2294}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37492,"byte_end":37500,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":1798}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":37659,"byte_end":37667,"line_start":77,"line_end":77,"column_start":19,"column_end":27},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":1803}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":40970,"byte_end":40978,"line_start":212,"line_end":212,"column_start":22,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":6960}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":41156,"byte_end":41164,"line_start":222,"line_end":222,"column_start":32,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":5532}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":41590,"byte_end":41598,"line_start":241,"line_end":241,"column_start":29,"column_end":37},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":5536}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":41773,"byte_end":41781,"line_start":249,"line_end":249,"column_start":26,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":5545}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":41981,"byte_end":41989,"line_start":260,"line_end":260,"column_start":34,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":5545}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\hash_set.rs","byte_start":42192,"byte_end":42200,"line_start":271,"line_end":271,"column_start":21,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1104},"to":{"krate":2,"index":2069}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56318,"byte_end":56329,"line_start":96,"line_end":96,"column_start":21,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1113},"to":{"krate":2,"index":6960}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":56445,"byte_end":56456,"line_start":102,"line_end":102,"column_start":6,"column_end":17},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":59592,"byte_end":59603,"line_start":191,"line_end":191,"column_start":18,"column_end":29},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1113},"to":{"krate":2,"index":2069}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\random_state.rs","byte_start":59697,"byte_end":59708,"line_start":198,"line_end":198,"column_start":22,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1113},"to":{"krate":2,"index":7187}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src\\specialize.rs","byte_start":63591,"byte_end":63592,"line_start":36,"line_end":36,"column_start":24,"column_end":25},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":381},"to":{"krate":0,"index":376}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":3056,"byte_end":3063,"line_start":89,"line_end":89,"column_start":18,"column_end":25},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1084},"to":{"krate":2,"index":2069}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":4196,"byte_end":4207,"line_start":120,"line_end":120,"column_start":34,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":7187},"to":{"krate":0,"index":396}},{"span":{"file_name":"C:\\Users\\sumba\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.7.3\\src/lib.rs","byte_start":4510,"byte_end":4511,"line_start":131,"line_end":131,"column_start":41,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":404},"to":{"krate":0,"index":396}}]}